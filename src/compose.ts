export interface ComposeType {
    /**
     * combination left to right functions
     * only first function can use multiple arguments.
     * return value is promise. * **Note**
     * - please use functions length 20 or less
     * - please specify argument type in first function
     * ```ts
     * const double1 = F.compose(F.collect, F.map((e: number) => e + e));
     * const double2 = F.compose((t: number[]) => t.map(e => e + e));
     * const a = [1,2,3,4];
     * const r1 = await double1(a);
     * const r2 = await double2(a);
     * console.log(r1); // [2,4,6,8]
     * console.log(r2); // [2,4,6,8]
     * ```
     *
     * @param ...f
     * @param t
     */
    <T extends any[], R0>(f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R0>;
    <T extends any[], R0, R1>(f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R1>;
    <T extends any[], R0, R1, R2>(f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R2>;
    <T extends any[], R0, R1, R2, R3>(f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R3>;
    <T extends any[], R0, R1, R2, R3, R4>(f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R4>;
    <T extends any[], R0, R1, R2, R3, R4, R5>(f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R5>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6>(f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R6>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7>(f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R7>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8>(f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R8>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>(f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R9>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>(f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R10>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>(f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R11>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>(f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R12>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>(f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R13>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14>(f14: (r13: R13) => (R14 | Promise<R14>), f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R14>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15>(f15: (r14: R14) => (R15 | Promise<R15>), f14: (r13: R13) => (R14 | Promise<R14>), f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R15>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16>(f16: (r15: R15) => (R16 | Promise<R16>), f15: (r14: R14) => (R15 | Promise<R15>), f14: (r13: R13) => (R14 | Promise<R14>), f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R16>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17>(f17: (r16: R16) => (R17 | Promise<R17>), f16: (r15: R15) => (R16 | Promise<R16>), f15: (r14: R14) => (R15 | Promise<R15>), f14: (r13: R13) => (R14 | Promise<R14>), f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R17>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18>(f18: (r17: R17) => (R18 | Promise<R18>), f17: (r16: R16) => (R17 | Promise<R17>), f16: (r15: R15) => (R16 | Promise<R16>), f15: (r14: R14) => (R15 | Promise<R15>), f14: (r13: R13) => (R14 | Promise<R14>), f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R18>;
    <T extends any[], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19>(f19: (r18: R18) => (R19 | Promise<R19>), f18: (r17: R17) => (R18 | Promise<R18>), f17: (r16: R16) => (R17 | Promise<R17>), f16: (r15: R15) => (R16 | Promise<R16>), f15: (r14: R14) => (R15 | Promise<R15>), f14: (r13: R13) => (R14 | Promise<R14>), f13: (r12: R12) => (R13 | Promise<R13>), f12: (r11: R11) => (R12 | Promise<R12>), f11: (r10: R10) => (R11 | Promise<R11>), f10: (r9: R9) => (R10 | Promise<R10>), f9: (r8: R8) => (R9 | Promise<R9>), f8: (r7: R7) => (R8 | Promise<R8>), f7: (r6: R6) => (R7 | Promise<R7>), f6: (r5: R5) => (R6 | Promise<R6>), f5: (r4: R4) => (R5 | Promise<R5>), f4: (r3: R3) => (R4 | Promise<R4>), f3: (r2: R2) => (R3 | Promise<R3>), f2: (r1: R1) => (R2 | Promise<R2>), f1: (r0: R0) => (R1 | Promise<R1>), f0: (...t: T) => (R0 | Promise<R0>)): (...t: T) => Promise<R19>;
}
export const compose: ComposeType = (...fns: any[]) => async (...args: any[]) => {
    const len = fns.length;
    let z = await fns[len - 1](...args);
    for (let i = len - 2; i >= 0; --i) {
        z = await fns[i](z);
    }
    return z;
};
